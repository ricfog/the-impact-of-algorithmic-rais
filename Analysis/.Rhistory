geom_tile() +
xlab("Participant") +
scale_fill_gradientn(name = bquote("% predictions \n of re-arrest" ~ Q[P + RAI]^b), colours = c("yellow", "red", "black")) +
# scale_fill_gradient(bquote('Fraction of\npredicted\nre-arrests'*Q[P+RAI]^b), colours = c('white', 'yellow', 'red', 'black')) +
scale_y_continuous(bquote("Participant's binned risk estimate" ~ Q[P + RAI]^p), breaks = seq(0, 0.9, length = 10), labels = labels_plot) +
coord_flip()
p %>% set_theme_ggplot() +
theme(
axis.text.y = element_blank(), axis.ticks.y = element_blank(),
panel.background = element_rect(fill = "white", colour = NA),
panel.grid = element_line(colour = "white")
)
p <- df_long_2hr %>%
mutate(binned_qp = floor(pmin(qp, 0.99) * 10) / 10) %>%
group_by(id, binned_qp) %>%
summarise(mean_qb = mean(qb)) %>%
arrange(binned_qp, mean_qb) %>%
ggplot(aes(factor(id, levels = ids_sorted), binned_qp, fill = mean_qb)) +
geom_tile() +
xlab("Participant") +
scale_fill_gradient(name = bquote("% predictions \n of re-arrest" ~ Q[P + RAI]^b), colours = c("yellow", "red", "black")) +
# scale_fill_gradient(bquote('Fraction of\npredicted\nre-arrests'*Q[P+RAI]^b), colours = c('white', 'yellow', 'red', 'black')) +
scale_y_continuous(bquote("Participant's binned risk estimate" ~ Q[P + RAI]^p), breaks = seq(0, 0.9, length = 10), labels = labels_plot) +
coord_flip()
p %>% set_theme_ggplot() +
theme(
axis.text.y = element_blank(), axis.ticks.y = element_blank(),
panel.background = element_rect(fill = "white", colour = NA),
panel.grid = element_line(colour = "white")
)
p <- df_long_2hr %>%
mutate(binned_qp = floor(pmin(qp, 0.99) * 10) / 10) %>%
group_by(id, binned_qp) %>%
summarise(mean_qb = mean(qb)) %>%
arrange(binned_qp, mean_qb) %>%
ggplot(aes(factor(id, levels = ids_sorted), binned_qp, fill = mean_qb)) +
geom_tile() +
xlab("Participant") +
scale_fill_gradient(name = bquote("% predictions \n of re-arrest"*Q[P + RAI]^b), colours = c("yellow", "red", "black")) +
# scale_fill_gradient(bquote('Fraction of\npredicted\nre-arrests'*Q[P+RAI]^b), colours = c('white', 'yellow', 'red', 'black')) +
scale_y_continuous(bquote("Participant's binned risk estimate" ~ Q[P + RAI]^p), breaks = seq(0, 0.9, length = 10), labels = labels_plot) +
coord_flip()
p %>% set_theme_ggplot() +
theme(
axis.text.y = element_blank(), axis.ticks.y = element_blank(),
panel.background = element_rect(fill = "white", colour = NA),
panel.grid = element_line(colour = "white")
)
p <- df_long_2hr %>%
mutate(binned_qp = floor(pmin(qp, 0.99) * 10) / 10) %>%
group_by(id, binned_qp) %>%
summarise(mean_qb = mean(qb)) %>%
arrange(binned_qp, mean_qb) %>%
ggplot(aes(factor(id, levels = ids_sorted), binned_qp, fill = mean_qb)) +
geom_tile() +
xlab("Participant") +
scale_fill_gradient(name = bquote("% predictions \n of re-arrest"*Q[P + RAI]^b*""), colours = c("yellow", "red", "black")) +
# scale_fill_gradient(bquote('Fraction of\npredicted\nre-arrests'*Q[P+RAI]^b), colours = c('white', 'yellow', 'red', 'black')) +
scale_y_continuous(bquote("Participant's binned risk estimate" ~ Q[P + RAI]^p), breaks = seq(0, 0.9, length = 10), labels = labels_plot) +
coord_flip()
p <- df_long_2hr %>%
mutate(binned_qp = floor(pmin(qp, 0.99) * 10) / 10) %>%
group_by(id, binned_qp) %>%
summarise(mean_qb = mean(qb)) %>%
arrange(binned_qp, mean_qb) %>%
ggplot(aes(factor(id, levels = ids_sorted), binned_qp, fill = mean_qb)) +
geom_tile() +
xlab("Participant") +
scale_fill_gradient(name = bquote("% predictions \n of re-arrest"*Q[P + RAI]^b*" "), colours = c("yellow", "red", "black")) +
# scale_fill_gradient(bquote('Fraction of\npredicted\nre-arrests'*Q[P+RAI]^b), colours = c('white', 'yellow', 'red', 'black')) +
scale_y_continuous(bquote("Participant's binned risk estimate" ~ Q[P + RAI]^p), breaks = seq(0, 0.9, length = 10), labels = labels_plot) +
coord_flip()
p <- df_long_2hr %>%
mutate(binned_qp = floor(pmin(qp, 0.99) * 10) / 10) %>%
group_by(id, binned_qp) %>%
summarise(mean_qb = mean(qb)) %>%
arrange(binned_qp, mean_qb) %>%
ggplot(aes(factor(id, levels = ids_sorted), binned_qp, fill = mean_qb)) +
geom_tile() +
xlab("Participant") +
scale_fill_gradient(name = bquote("% predictions \n of re-arrest"*Q[P + RAI]^b*' '), colours = c("yellow", "red", "black")) +
# scale_fill_gradient(bquote('Fraction of\npredicted\nre-arrests'*Q[P+RAI]^b), colours = c('white', 'yellow', 'red', 'black')) +
scale_y_continuous(bquote("Participant's binned risk estimate" ~ Q[P + RAI]^p), breaks = seq(0, 0.9, length = 10), labels = labels_plot) +
coord_flip()
p %>% set_theme_ggplot() +
theme(
axis.text.y = element_blank(), axis.ticks.y = element_blank(),
panel.background = element_rect(fill = "white", colour = NA),
panel.grid = element_line(colour = "white")
)
p <- df_long_2hr %>%
mutate(binned_qp = floor(pmin(qp, 0.99) * 10) / 10) %>%
group_by(id, binned_qp) %>%
summarise(mean_qb = mean(qb)) %>%
arrange(binned_qp, mean_qb) %>%
ggplot(aes(factor(id, levels = ids_sorted), binned_qp, fill = mean_qb)) +
geom_tile() +
xlab("Participant") +
scale_fill_gradient(name = bquote("% predictions \n of re-arrest"*Q[P + RAI]^b*'fds'), colours = c("yellow", "red", "black")) +
# scale_fill_gradient(bquote('Fraction of\npredicted\nre-arrests'*Q[P+RAI]^b), colours = c('white', 'yellow', 'red', 'black')) +
scale_y_continuous(bquote("Participant's binned risk estimate" ~ Q[P + RAI]^p), breaks = seq(0, 0.9, length = 10), labels = labels_plot) +
coord_flip()
p <- df_long_2hr %>%
mutate(binned_qp = floor(pmin(qp, 0.99) * 10) / 10) %>%
group_by(id, binned_qp) %>%
summarise(mean_qb = mean(qb)) %>%
arrange(binned_qp, mean_qb) %>%
ggplot(aes(factor(id, levels = ids_sorted), binned_qp, fill = mean_qb)) +
geom_tile() +
xlab("Participant") +
scale_fill_gradient(name = bquote("% predictions \n of re-arrest"*Q[P + RAI]^b), colours = c("yellow", "red", "black")) +
# scale_fill_gradient(bquote('Fraction of\npredicted\nre-arrests'*Q[P+RAI]^b), colours = c('white', 'yellow', 'red', 'black')) +
scale_y_continuous(bquote("Participant's binned risk estimate" ~ Q[P + RAI]^p), breaks = seq(0, 0.9, length = 10), labels = labels_plot) +
coord_flip()
p <- df_long_2hr %>%
mutate(binned_qp = floor(pmin(qp, 0.99) * 10) / 10) %>%
group_by(id, binned_qp) %>%
summarise(mean_qb = mean(qb)) %>%
arrange(binned_qp, mean_qb) %>%
ggplot(aes(factor(id, levels = ids_sorted), binned_qp, fill = mean_qb)) +
geom_tile() +
xlab("Participant") +
scale_fill_gradient(name = bquote("% predictions \n of re-arrest" ~ Q[P + RAI]^b), colours = c("yellow", "red", "black")) +
# scale_fill_gradient(bquote('Fraction of\npredicted\nre-arrests'*Q[P+RAI]^b), colours = c('white', 'yellow', 'red', 'black')) +
scale_y_continuous(bquote("Participant's binned risk estimate" ~ Q[P + RAI]^p), breaks = seq(0, 0.9, length = 10), labels = labels_plot) +
coord_flip()
p <- df_long_2hr %>%
mutate(binned_qp = floor(pmin(qp, 0.99) * 10) / 10) %>%
group_by(id, binned_qp) %>%
summarise(mean_qb = mean(qb)) %>%
arrange(binned_qp, mean_qb) %>%
ggplot(aes(factor(id, levels = ids_sorted), binned_qp, fill = mean_qb)) +
geom_tile() +
xlab("Participant") +
scale_fill_gradient(name = bquote("% predictions \n of re-arrest" ~ Q[P + RAI]^b), colours = c("yellow", "red", "black")) +
# scale_fill_gradient(bquote('Fraction of\npredicted\nre-arrests'*Q[P+RAI]^b), colours = c('white', 'yellow', 'red', 'black')) +
scale_y_continuous(bquote("Participant's binned risk estimate" ~ Q[P + RAI]^p), breaks = seq(0, 0.9, length = 10), labels = labels_plot) +
coord_flip()
p <- df_long_2hr %>%
mutate(binned_qp = floor(pmin(qp, 0.99) * 10) / 10) %>%
group_by(id, binned_qp) %>%
summarise(mean_qb = mean(qb)) %>%
arrange(binned_qp, mean_qb) %>%
ggplot(aes(factor(id, levels = ids_sorted), binned_qp, fill = mean_qb)) +
geom_tile() +
xlab("Participant") +
scale_fill_gradientn(name = bquote("% predictions \n of re-arrest" ~ Q[P + RAI]^b), colours = c("yellow", "red", "black")) +
# scale_fill_gradient(bquote('Fraction of\npredicted\nre-arrests'*Q[P+RAI]^b), colours = c('white', 'yellow', 'red', 'black')) +
scale_y_continuous(bquote("Participant's binned risk estimate" ~ Q[P + RAI]^p), breaks = seq(0, 0.9, length = 10), labels = labels_plot) +
coord_flip()
p %>% set_theme_ggplot() +
theme(
axis.text.y = element_blank(), axis.ticks.y = element_blank(),
panel.background = element_rect(fill = "white", colour = NA),
panel.grid = element_line(colour = "white")
)
p <- df_long_2hr %>%
mutate(binned_qp = floor(pmin(qp, 0.99) * 10) / 10) %>%
group_by(id, binned_qp) %>%
summarise(mean_qb = mean(qb)) %>%
arrange(binned_qp, mean_qb) %>%
ggplot(aes(factor(id, levels = ids_sorted), binned_qp, fill = mean_qb)) +
geom_tile() +
xlab("Participant") +
scale_fill_gradientn(name = bquote("% predictions \n of re-arrest"*Q[P + RAI]^b), colours = c("yellow", "red", "black")) +
# scale_fill_gradient(bquote('Fraction of\npredicted\nre-arrests'*Q[P+RAI]^b), colours = c('white', 'yellow', 'red', 'black')) +
scale_y_continuous(bquote("Participant's binned risk estimate" ~ Q[P + RAI]^p), breaks = seq(0, 0.9, length = 10), labels = labels_plot) +
coord_flip()
p %>% set_theme_ggplot() +
theme(
axis.text.y = element_blank(), axis.ticks.y = element_blank(),
panel.background = element_rect(fill = "white", colour = NA),
panel.grid = element_line(colour = "white")
)
ggsave(width = 8, height = 4, here("Plots", "Mapping_prob_dec_by_id.pdf"), device = cairo_pdf)
# plot fraction of predicted re-arrests for each risk estimate and worker
# sort ids by lowest risk estimate with qb positive
ids_sorted <- df_long_2hr %>%
group_by(id) %>%
filter(qb == 1) %>%
summarise(min_qp = min(qp)) %>%
arrange(min_qp) %>%
pull(., id)
p <- df_long_2hr %>%
mutate(binned_qp = floor(pmin(qp, 0.99) * 10) / 10) %>%
group_by(id, binned_qp) %>%
summarise(mean_qb = mean(qb)) %>%
arrange(binned_qp, mean_qb) %>%
ggplot(aes(factor(id, levels = ids_sorted), binned_qp, fill = mean_qb)) +
geom_tile() +
xlab("Participant") +
scale_fill_gradientn(name = bquote("% predictions \n of re-arrest"*Q[P + RAI]^b), colours = c("yellow", "red", "black")) +
# scale_fill_gradient(bquote('Fraction of\npredicted\nre-arrests'*Q[P+RAI]^b), colours = c('white', 'yellow', 'red', 'black')) +
scale_y_continuous(bquote("Participant's binned risk estimate" ~ Q[P + RAI]^p), breaks = seq(0, 0.9, length = 10), labels = labels_plot) +
coord_flip()
p %>% set_theme_ggplot() +
theme(
axis.text.y = element_blank(), axis.ticks.y = element_blank(),
panel.background = element_rect(fill = "white", colour = NA),
panel.grid = element_line(colour = "white")
)
ggsave(width = 8, height = 4, here("Plots", "Mapping_prob_dec_by_id.pdf"), device = cairo_pdf)
p <- df_long_2hr %>%
mutate(binned_qp = floor(pmin(qp, 0.99) * 10) / 10) %>%
group_by(id, binned_qp) %>%
summarise(mean_qb = mean(qb)) %>%
arrange(binned_qp, mean_qb) %>%
ggplot(aes(factor(id, levels = ids_sorted), binned_qp, fill = mean_qb)) +
geom_tile() +
xlab("Participant") +
scale_fill_gradientn(name = bquote("% predictions \n of re-arrest"*Q[P + RAI]^b), colours = c("yellow", "red", "black")) +
# scale_fill_gradient(bquote('Fraction of\npredicted\nre-arrests'*Q[P+RAI]^b), colours = c('white', 'yellow', 'red', 'black')) +
scale_y_continuous(bquote("Participant's binned risk estimate" ~ Q[P + RAI]^p), breaks = seq(0, 0.9, length = 10), labels = labels_plot) +
coord_flip()
p %>% set_theme_ggplot() +
theme(
axis.text.y = element_blank(), axis.ticks.y = element_blank(),
panel.background = element_rect(fill = "white", colour = NA),
panel.grid = element_line(colour = "white")
)
p <- df_long_2hr %>%
mutate(binned_qp = floor(pmin(qp, 0.99) * 10) / 10) %>%
group_by(id, binned_qp) %>%
summarise(mean_qb = mean(qb)) %>%
arrange(binned_qp, mean_qb) %>%
ggplot(aes(factor(id, levels = ids_sorted), binned_qp, fill = mean_qb)) +
geom_tile() +
xlab("Participant") +
scale_fill_gradientn(name = bquote("% predictions of re-arrest"*Q[P + RAI]^b), colours = c("yellow", "red", "black")) +
# scale_fill_gradient(bquote('Fraction of\npredicted\nre-arrests'*Q[P+RAI]^b), colours = c('white', 'yellow', 'red', 'black')) +
scale_y_continuous(bquote("Participant's binned risk estimate" ~ Q[P + RAI]^p), breaks = seq(0, 0.9, length = 10), labels = labels_plot) +
coord_flip()
p %>% set_theme_ggplot() +
theme(
axis.text.y = element_blank(), axis.ticks.y = element_blank(),
panel.background = element_rect(fill = "white", colour = NA),
panel.grid = element_line(colour = "white")
)
p <- df_long_2hr %>%
mutate(binned_qp = floor(pmin(qp, 0.99) * 10) / 10) %>%
group_by(id, binned_qp) %>%
summarise(mean_qb = mean(qb)) %>%
arrange(binned_qp, mean_qb) %>%
ggplot(aes(factor(id, levels = ids_sorted), binned_qp, fill = mean_qb)) +
geom_tile() +
xlab("Participant") +
scale_fill_gradientn(name = bquote("% predictions of \n re-arrest"*Q[P + RAI]^b), colours = c("yellow", "red", "black")) +
# scale_fill_gradient(bquote('Fraction of\npredicted\nre-arrests'*Q[P+RAI]^b), colours = c('white', 'yellow', 'red', 'black')) +
scale_y_continuous(bquote("Participant's binned risk estimate" ~ Q[P + RAI]^p), breaks = seq(0, 0.9, length = 10), labels = labels_plot) +
coord_flip()
p %>% set_theme_ggplot() +
theme(
axis.text.y = element_blank(), axis.ticks.y = element_blank(),
panel.background = element_rect(fill = "white", colour = NA),
panel.grid = element_line(colour = "white")
)
p <- df_long_2hr %>%
mutate(binned_qp = floor(pmin(qp, 0.99) * 10) / 10) %>%
group_by(id, binned_qp) %>%
summarise(mean_qb = mean(qb)) %>%
arrange(binned_qp, mean_qb) %>%
ggplot(aes(factor(id, levels = ids_sorted), binned_qp, fill = mean_qb)) +
geom_tile() +
xlab("Participant") +
scale_fill_gradientn(name = bquote(atop("% predictions", "re-arrest"*Q[P + RAI]^b)), colours = c("yellow", "red", "black")) +
# scale_fill_gradient(bquote('Fraction of\npredicted\nre-arrests'*Q[P+RAI]^b), colours = c('white', 'yellow', 'red', 'black')) +
scale_y_continuous(bquote("Participant's binned risk estimate" ~ Q[P + RAI]^p), breaks = seq(0, 0.9, length = 10), labels = labels_plot) +
coord_flip()
p %>% set_theme_ggplot() +
theme(
axis.text.y = element_blank(), axis.ticks.y = element_blank(),
panel.background = element_rect(fill = "white", colour = NA),
panel.grid = element_line(colour = "white")
)
p <- df_long_2hr %>%
mutate(binned_qp = floor(pmin(qp, 0.99) * 10) / 10) %>%
group_by(id, binned_qp) %>%
summarise(mean_qb = mean(qb)) %>%
arrange(binned_qp, mean_qb) %>%
ggplot(aes(factor(id, levels = ids_sorted), binned_qp, fill = mean_qb)) +
geom_tile() +
xlab("Participant") +
scale_fill_gradientn(name = bquote(atop("% predictions", "re-arrest"~ Q[P + RAI]^b)), colours = c("yellow", "red", "black")) +
# scale_fill_gradient(bquote('Fraction of\npredicted\nre-arrests'*Q[P+RAI]^b), colours = c('white', 'yellow', 'red', 'black')) +
scale_y_continuous(bquote("Participant's binned risk estimate" ~ Q[P + RAI]^p), breaks = seq(0, 0.9, length = 10), labels = labels_plot) +
coord_flip()
p <- df_long_2hr %>%
mutate(binned_qp = floor(pmin(qp, 0.99) * 10) / 10) %>%
group_by(id, binned_qp) %>%
summarise(mean_qb = mean(qb)) %>%
arrange(binned_qp, mean_qb) %>%
ggplot(aes(factor(id, levels = ids_sorted), binned_qp, fill = mean_qb)) +
geom_tile() +
xlab("Participant") +
scale_fill_gradientn(name = bquote(atop("% predictions", "re-arrest"~ Q[P + RAI]^b)), colours = c("yellow", "red", "black")) +
# scale_fill_gradient(bquote('Fraction of\npredicted\nre-arrests'*Q[P+RAI]^b), colours = c('white', 'yellow', 'red', 'black')) +
scale_y_continuous(bquote("Participant's binned risk estimate" ~ Q[P + RAI]^p), breaks = seq(0, 0.9, length = 10), labels = labels_plot) +
coord_flip()
p %>% set_theme_ggplot() +
theme(
axis.text.y = element_blank(), axis.ticks.y = element_blank(),
panel.background = element_rect(fill = "white", colour = NA),
panel.grid = element_line(colour = "white")
)
p <- df_long_2hr %>%
mutate(binned_qp = floor(pmin(qp, 0.99) * 10) / 10) %>%
group_by(id, binned_qp) %>%
summarise(mean_qb = mean(qb)) %>%
arrange(binned_qp, mean_qb) %>%
ggplot(aes(factor(id, levels = ids_sorted), binned_qp, fill = mean_qb)) +
geom_tile() +
xlab("Participant") +
scale_fill_gradientn(name = bquote(atop("% predictions", "re-arrest" ~ Q[P + RAI]^b)), colours = c("yellow", "red", "black")) +
# scale_fill_gradient(bquote('Fraction of\npredicted\nre-arrests'*Q[P+RAI]^b), colours = c('white', 'yellow', 'red', 'black')) +
scale_y_continuous(bquote("Participant's binned risk estimate" ~ Q[P + RAI]^p), breaks = seq(0, 0.9, length = 10), labels = labels_plot) +
coord_flip()
p %>% set_theme_ggplot() +
theme(
axis.text.y = element_blank(), axis.ticks.y = element_blank(),
panel.background = element_rect(fill = "white", colour = NA),
panel.grid = element_line(colour = "white")
)
ggsave(width = 8, height = 4, here("Plots", "Mapping_prob_dec_by_id.pdf"), device = cairo_pdf)
# plot fraction of predicted re-arrests for each risk estimate and worker
# sort ids by lowest risk estimate with qb positive
ids_sorted <- df_long_2hr %>%
group_by(id) %>%
filter(qb == 1) %>%
summarise(min_qp = min(qp)) %>%
arrange(min_qp) %>%
pull(., id)
p <- df_long_2hr %>%
mutate(binned_qp = floor(pmin(qp, 0.99) * 10) / 10) %>%
group_by(id, binned_qp) %>%
summarise(mean_qb = mean(qb)) %>%
arrange(binned_qp, mean_qb) %>%
ggplot(aes(factor(id, levels = ids_sorted), binned_qp, fill = mean_qb)) +
geom_tile() +
xlab("Participant") +
scale_fill_gradientn(name = bquote(atop("% predictions", "re-arrest" ~ Q[P + RAI]^b)), colours = c("yellow", "red", "black")) +
# scale_fill_gradient(bquote('Fraction of\npredicted\nre-arrests'*Q[P+RAI]^b), colours = c('white', 'yellow', 'red', 'black')) +
scale_y_continuous(bquote("Participant's binned risk estimate" ~ Q[P + RAI]^p), breaks = seq(0, 0.9, length = 10), labels = labels_plot) +
coord_flip()
p %>% set_theme_ggplot() +
theme(
axis.text.y = element_blank(), axis.ticks.y = element_blank(),
panel.background = element_rect(fill = "white", colour = NA),
panel.grid = element_line(colour = "white")
)
ggsave(width = 8, height = 4, here("Plots", "Mapping_prob_dec_by_id.pdf"), device = cairo_pdf)
library(tidyverse)
library(here)
library(vroom)
library(xtable)
library(tidymodels)
source(here("Analysis", "utils.R"))
install.packages('Cairo')
ggsave(width = 8, height = 4, here("Plots", "Mapping_prob_dec_by_id.pdf"), device = cairo_pdf)
ggsave(width = 8, height = 4, here("Plots", "Mapping_prob_dec.pdf"), device = cairo_pdf)
source('~/Desktop/Human Decision Making/Paper_final_revision/Supplementary_material/Analysis/Analysis_probability_and_binary_predictions.R', echo=TRUE)
# Load libraries and data -----
library(tidyverse)
library(here)
library(vroom)
library(xtable)
library(tidymodels)
df <- vroom(here('Data', 'Predictions.csv'))
perc <- vroom(here('Data', 'Perception.csv')) %>% inner_join(df %>% distinct(id, condition, setting), by = 'id')
# get all answers (h, hr, and r) in the same column but keep qp and qb in the same row
df_all <- df %>%
select(qp_h, qp_hr, qp_r, setting, condition, outcome, order_question, survey_part, id) %>%
pivot_longer(cols=c('qp_h', 'qp_hr', 'qp_r'), names_to = 'type', values_to = 'qp') %>%
mutate(type = case_when(type == 'qp_h' ~ 'h', type == 'qp_hr' ~ 'hr', TRUE ~ 'r')) %>%
bind_cols(
df %>% select(qb_h, qb_hr, qb_r) %>%
pivot_longer(cols=c('qb_h', 'qb_hr', 'qb_r'), names_to = 'type_answer', values_to = 'qb') %>%
select(-type_answer)
) %>%
drop_na()
## group and transform answers in perception questions
perc <- perc %>%
mutate(humanaccuracy_2 = ifelse(grepl('25', humanaccuracy_2), NA, humanaccuracy_2)) %>%
rowwise() %>%
mutate_at(paste0('use_binary_', 2:3), function(x) as.numeric(strsplit(x, "\\/")[[1]][1])/as.numeric(strsplit(x, "\\/")[[1]][2])) %>%
mutate_at(paste0('use_likelihood_', 2:3), function(x) as.numeric(strsplit(x, "\\/")[[1]][1])/as.numeric(strsplit(x, "\\/")[[1]][2])) %>%
mutate_at(paste0('humanaccuracy_', 1:3), function(x) as.numeric(strsplit(x, "\\/")[[1]][1])/as.numeric(strsplit(x, "\\/")[[1]][2])) %>%
mutate_at(c(paste0('confidence_', 1:3)), function(x) case_when(
x == 'Moderately confident' | x == 'Extremely confident' ~ 'Confident',
x == 'Not confident at all' | x == 'Slightly confident' ~ 'Not confident',
TRUE ~ 'Somewhat confident')) %>%
mutate_at(c(paste0('humanaccuracy_comparison_', 1:3)), function(x) case_when(
x == "among the lowest accuracies (0-20%)" | x == "lower than most accuracies (21-40%)" ~ 'Lower',
x == "approximately equal to the median accuracy (41-60%)" ~ 'Median',
TRUE ~ 'Higher'))
# transform dataframe into long format
perc1 <- perc %>% select(matches('1'), id)
colnames(perc1) <- str_replace(colnames(perc1), '_1', '')
perc2 <- perc %>% select(matches('2'), id)
colnames(perc2) <- str_replace(colnames(perc2), '_2', '')
perc3 <- perc %>% select(matches('3'), id)
colnames(perc3) <- str_replace(colnames(perc3), '_3', '')
perc <- perc1 %>% mutate(set_q = 1) %>%
bind_rows(perc2 %>% mutate(set_q = 2)) %>%
bind_rows(perc3 %>% mutate(set_q = 3))
# Analysis of overall performance ----
# get classifier for which % of predicted positives = % of predicted positives by human
# for the % predicted positives by human choose the predictions of human+RAI
pos <- round(mean(df_all[(df_all$type=='hr' | df_all$type=='h'),]$qb), 3)
# find threshold for the tool
seq_th <- seq(0,1,by=0.01)
th <- seq_th[which(as.list(seq_th) %>% purrr::map(~ mean(df_all[df_all$type=='r',]$qp>.x[[1]])) %>%
unlist()>=pos) %>% max()]
# create new binary predictions and attach to df_all
df_all_eq <- df_all %>%
bind_rows(df_all %>% filter(type == 'r') %>% mutate(type = 're') %>% mutate(qb = ifelse(qp>=th, 1, 0)))
# get performance metrics
# % predicted positives
pos <- df_all_eq %>% group_by(type) %>% summarise(value = mean(qb), se = sd(qb)/sqrt(n()))
t.test(df_all_eq[df_all_eq$type=='hr',]$qb, df_all_eq[df_all_eq$type=='r',]$qb)
# accuracy
acc <- df_all_eq %>% group_by(type) %>% summarise(value = mean(qb == outcome), se = sd(qb == outcome)/sqrt(n()))
# H+RAI vs RAI
t.test(ifelse(df_all_eq[df_all_eq$type=='hr',]$outcome==df_all_eq[df_all_eq$type=='hr',]$qb, 1, 0),
ifelse(df_all_eq[df_all_eq$type=='r',]$outcome==df_all_eq[df_all_eq$type=='r',]$qb, 1, 0))$p.value
# H+RAI vs RAIeq
t.test(ifelse(df_all_eq[df_all_eq$type=='hr',]$outcome==df_all_eq[df_all_eq$type=='hr',]$qb, 1, 0),
ifelse(df_all_eq[df_all_eq$type=='re',]$outcome==df_all_eq[df_all_eq$type=='re',]$qb, 1, 0))$p.value
# RAI vs RAIeq
t.test(ifelse(df_all_eq[df_all_eq$type=='r',]$outcome==df_all_eq[df_all_eq$type=='r',]$qb, 1, 0),
ifelse(df_all_eq[df_all_eq$type=='re',]$outcome==df_all_eq[df_all_eq$type=='re',]$qb, 1, 0))$p.value
# false positive rate
fpr <- df_all_eq %>% filter(outcome == 0) %>% group_by(type) %>% summarise(value = mean(qb != outcome), se = sd(qb != outcome)/sqrt(n()))
# RAI vs RAIeq
t.test(ifelse(df_all_eq[df_all_eq$type=='r' & df_all_eq$outcome==0,]$outcome!=df_all_eq[df_all_eq$type=='r' & df_all_eq$outcome==0,]$qb, 1, 0),
ifelse(df_all_eq[df_all_eq$type=='re'& df_all_eq$outcome==0,]$outcome!=df_all_eq[df_all_eq$type=='re'  & df_all_eq$outcome==0,]$qb, 1, 0))$p.value
# H+RAI vs RAI
t.test(ifelse(df_all_eq[df_all_eq$type=='hr' & df_all_eq$outcome==0,]$outcome!=df_all_eq[df_all_eq$type=='hr' & df_all_eq$outcome==0,]$qb, 1, 0),
ifelse(df_all_eq[df_all_eq$type=='r'& df_all_eq$outcome==0,]$outcome!=df_all_eq[df_all_eq$type=='r'  & df_all_eq$outcome==0,]$qb, 1, 0))$p.value
# H+RAI vs RAIeq
t.test(ifelse(df_all_eq[df_all_eq$type=='hr' & df_all_eq$outcome==0,]$outcome!=df_all_eq[df_all_eq$type=='hr' & df_all_eq$outcome==0,]$qb, 1, 0),
ifelse(df_all_eq[df_all_eq$type=='re'& df_all_eq$outcome==0,]$outcome!=df_all_eq[df_all_eq$type=='re'  & df_all_eq$outcome==0,]$qb, 1, 0))$p.value
# false negative rate
fnr <- df_all_eq %>% filter(outcome == 1) %>% group_by(type) %>% summarise(value = mean(qb != outcome), se = sd(qb != outcome)/sqrt(n()))
# RAI vs RAIeq
t.test(ifelse(df_all_eq[df_all_eq$type=='r' & df_all_eq$outcome==1,]$outcome!=df_all_eq[df_all_eq$type=='r' & df_all_eq$outcome==1,]$qb, 1, 0),
ifelse(df_all_eq[df_all_eq$type=='re'& df_all_eq$outcome==1,]$outcome!=df_all_eq[df_all_eq$type=='re'  & df_all_eq$outcome==1,]$qb, 1, 0))$p.value
# P+RAI vs RAI
t.test(ifelse(df_all_eq[df_all_eq$type=='hr' & df_all_eq$outcome==1,]$outcome!=df_all_eq[df_all_eq$type=='hr' & df_all_eq$outcome==1,]$qb, 1, 0),
ifelse(df_all_eq[df_all_eq$type=='r'& df_all_eq$outcome==1,]$outcome!=df_all_eq[df_all_eq$type=='r'  & df_all_eq$outcome==1,]$qb, 1, 0))$p.value
# P+RAI vs RAIeq
t.test(ifelse(df_all_eq[df_all_eq$type=='hr' & df_all_eq$outcome==1,]$outcome!=df_all_eq[df_all_eq$type=='hr' & df_all_eq$outcome==1,]$qb, 1, 0),
ifelse(df_all_eq[df_all_eq$type=='re'& df_all_eq$outcome==1,]$outcome!=df_all_eq[df_all_eq$type=='re'  & df_all_eq$outcome==1,]$qb, 1, 0))$p.value
# positive predicted values
ppv <- df_all_eq %>% filter(qb == 1) %>% group_by(type) %>% summarise(value = mean(outcome), se = sd(outcome)/sqrt(n()))
# RAI vs RAIeq
t.test(df_all_eq[df_all_eq$type=='r' & df_all_eq$qb==1,]$outcome,
df_all_eq[df_all_eq$type=='re' & df_all_eq$qb==1,]$outcome)$p.value
# P+RAI vs RAI
t.test(df_all_eq[df_all_eq$type=='hr' & df_all_eq$qb==1,]$outcome,
df_all_eq[df_all_eq$type=='r' & df_all_eq$qb==1,]$outcome)$p.value
# H+RAI vs RAIeq
t.test(df_all_eq[df_all_eq$type=='hr' & df_all_eq$qb==1,]$outcome,
df_all_eq[df_all_eq$type=='re' & df_all_eq$qb==1,]$outcome)$p.value
# bootstrap (CI)
auc <- as.list(1:300) %>% purrr::map(~ df_all_eq %>% group_by(type) %>%
sample_n(nrow(.), replace=T) %>%  # sampling with replacement
group_by(type) %>%
group_modify(~roc_auc(., outcome %>% as.factor(), qp)) # compute AUC
) %>%
bind_rows() %>% select(-.metric, -.estimator) %>% rename(value = .estimate) %>%
group_by(type) %>% summarise(lb = quantile(value, probs=0.025), ub = quantile(value, probs=0.975), value = mean(value))
# gather all metrics together
metrics <- pos %>% mutate(metric = 'Fraction of predicted positives') %>%
bind_rows(acc %>% mutate(metric = 'Accuracy')) %>%
bind_rows(fpr %>% mutate(metric = 'False positive rate (FPR)')) %>%
bind_rows(fnr %>% mutate(metric = 'False negative rate (FNR)')) %>%
bind_rows(ppv %>% mutate(metric = 'Positive predicted value (PPV)')) %>%
mutate(lb = value-1.96*se, ub = value+1.96*se) %>% select(-se) %>%
bind_rows(auc %>% mutate(metric = 'Area under the curve (AUC)'))
# plot metrics
order_metrics <- unique(metrics$metric)
metrics %>%
ggplot(aes(factor(metric,
levels = order_metrics),
value, fill = factor(type, levels = c('h', 'hr', 're', 'r')))) +
geom_col(position = position_dodge2()) +
geom_errorbar(aes(ymin = lb, ymax = ub), position = position_dodge2(width = 0.9, padding = .6)) +
theme_bw() + xlab('Metric') +
scale_y_continuous('Value (%)', limits = c(0,1), breaks = seq(0,1,by=0.25), labels = paste0(seq(0,1,by=0.25)*100, '%')) +
scale_fill_manual(name = 'Answer', labels = c(bquote(Q[P]), bquote(Q[P+RAI]), bquote(Q['RAI,eq']), bquote(Q[RAI])),
values = c("#999999", "#E69F00", "#56B4E9", "#009E73"))
metrics %>%
ggplot(aes(factor(metric,
levels = order_metrics),
value, fill = factor(type, levels = c('h', 'hr', 're', 'r')))) +
geom_col(position = position_dodge2()) +
geom_errorbar(aes(ymin = lb, ymax = ub), position = position_dodge2(width = 0.9, padding = .6)) +
theme_bw() + xlab('Metric') +
scale_y_continuous('Value (%)', limits = c(0,1), breaks = seq(0,1,by=0.25), labels = paste0(seq(0,1,by=0.25)*100, '%')) +
scale_fill_manual(name = 'Prediction', labels = c(bquote(Q[P]), bquote(Q[P+RAI]), bquote(Q['RAI,eq']), bquote(Q[RAI])),
values = c("#999999", "#E69F00", "#56B4E9", "#009E73"))
metrics %>%
ggplot(aes(factor(metric,
levels = order_metrics),
value, fill = factor(type, levels = c('h', 'hr', 're', 'r')))) +
geom_col(position = position_dodge2()) +
geom_errorbar(aes(ymin = lb, ymax = ub), position = position_dodge2(width = 0.9, padding = .6)) +
theme_bw() + xlab('Metric') +
scale_y_continuous('Value (%)', limits = c(0,1), breaks = seq(0,1,by=0.25), labels = paste0(seq(0,1,by=0.25)*100, '%')) +
scale_fill_manual(name = 'Prediction', labels = c(bquote(Q[P]), bquote(Q[P+RAI]), bquote(Q['RAI,eq']), bquote(Q[RAI])),
values = c("#999999", "#E69F00", "#56B4E9", "#009E73"))
ggsave(width = 12, height = 3, here('Plots', 'Performance.pdf'), device = cairo_pdf)
